- We can, once the steps are complete, inform the user
- about the ability to change the location of the `fonts` directory
- if not satisfied, after which they run the cli command again to update
- the font file import paths

- After lofo has successfully completed its tasks, it prompts the user
- to follow the displayed link(to to the Next.js docs on fonts optimization) for
- next steps(in case they're somehow not aware of how to use the font variable or className props)

- Add ability for user to pass an argument along with `lofo` command
- for the path to their preferred final destination of the fonts directory.
- By default it'd be placed in the "public" folder of your Next.js project
- it'd create one if it doesn't already exist



- GOALS TODAY
- IMPLEMENT UTILITY FUNCTION FOR WRITING FONTS TO FILE[ABLE TO INSERT CONTENT AT SPECIFIC POINTS]
- START IMPLEMENTING INCREMENTAL UPDATES[ON ANY SUCCESSIVE ATTEMPT TO ADD A FONT, APPEND THE RIGHT CONTENT TO INDEX FILE]
- PROPERLY IMPLEMENT MOVING FONTS DIR INTO PUBLIC DIR[ACCOMODATING OF POTENTIAL DEST ARGS PASSED BY USER]
- writeLine(filePath: string, condition: (lineNumber, lineContent, prevLineContent) => {}, content: string, flag: "M")
- fileContent.split("\n").join().split("export").filter((item) => item.includes("<key>"))


- when about to write font, check if font belongs to any of the famillies that already exist
- if true, in index.ts(where fonts are being exported) modify that families src property
- if src property is type string, create a new array and spread

- If new font files are found, check if they belong an existing family
- if true, get the paths to their already existing families and return an array of all the files in that family plus the newly added ones
- then regroup[the regrouping step in this algo is temp, might change in the future for perf reasons??] the font families